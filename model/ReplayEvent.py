# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ReplayEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReplayEvent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReplayEvent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ReplayEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReplayEvent
    def Action(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ReplayEvent
    def Key(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ReplayEvent
    def KeyAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ReplayEvent
    def KeyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReplayEvent
    def KeyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ReplayEvent
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ReplayEvent
    def ValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ReplayEvent
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReplayEvent
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def ReplayEventStart(builder): builder.StartObject(3)
def Start(builder):
    return ReplayEventStart(builder)
def ReplayEventAddAction(builder, action): builder.PrependInt8Slot(0, action, 0)
def AddAction(builder, action):
    return ReplayEventAddAction(builder, action)
def ReplayEventAddKey(builder, key): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)
def AddKey(builder, key):
    return ReplayEventAddKey(builder, key)
def ReplayEventStartKeyVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartKeyVector(builder, numElems):
    return ReplayEventStartKeyVector(builder, numElems)
def ReplayEventAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return ReplayEventAddValue(builder, value)
def ReplayEventStartValueVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartValueVector(builder, numElems):
    return ReplayEventStartValueVector(builder, numElems)
def ReplayEventEnd(builder): return builder.EndObject()
def End(builder):
    return ReplayEventEnd(builder)
try:
    from typing import List
except:
    pass

class ReplayEventT(object):

    # ReplayEventT
    def __init__(self):
        self.action = 0  # type: int
        self.key = None  # type: List[int]
        self.value = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        replayEvent = ReplayEvent()
        replayEvent.Init(buf, pos)
        return cls.InitFromObj(replayEvent)

    @classmethod
    def InitFromObj(cls, replayEvent):
        x = ReplayEventT()
        x._UnPack(replayEvent)
        return x

    # ReplayEventT
    def _UnPack(self, replayEvent):
        if replayEvent is None:
            return
        self.action = replayEvent.Action()
        if not replayEvent.KeyIsNone():
            if np is None:
                self.key = []
                for i in range(replayEvent.KeyLength()):
                    self.key.append(replayEvent.Key(i))
            else:
                self.key = replayEvent.KeyAsNumpy()
        if not replayEvent.ValueIsNone():
            if np is None:
                self.value = []
                for i in range(replayEvent.ValueLength()):
                    self.value.append(replayEvent.Value(i))
            else:
                self.value = replayEvent.ValueAsNumpy()

    # ReplayEventT
    def Pack(self, builder):
        if self.key is not None:
            if np is not None and type(self.key) is np.ndarray:
                key = builder.CreateNumpyVector(self.key)
            else:
                ReplayEventStartKeyVector(builder, len(self.key))
                for i in reversed(range(len(self.key))):
                    builder.PrependUint8(self.key[i])
                key = builder.EndVector()
        if self.value is not None:
            if np is not None and type(self.value) is np.ndarray:
                value = builder.CreateNumpyVector(self.value)
            else:
                ReplayEventStartValueVector(builder, len(self.value))
                for i in reversed(range(len(self.value))):
                    builder.PrependUint8(self.value[i])
                value = builder.EndVector()
        ReplayEventStart(builder)
        ReplayEventAddAction(builder, self.action)
        if self.key is not None:
            ReplayEventAddKey(builder, key)
        if self.value is not None:
            ReplayEventAddValue(builder, value)
        replayEvent = ReplayEventEnd(builder)
        return replayEvent
