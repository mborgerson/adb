# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Address(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 16

    # Address
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Address
    def SpaceId(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # Address
    def Offset(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))

def CreateAddress(builder, spaceId, offset):
    builder.Prep(8, 16)
    builder.PrependUint64(offset)
    builder.Pad(6)
    builder.PrependUint16(spaceId)
    return builder.Offset()


class AddressT(object):

    # AddressT
    def __init__(self):
        self.spaceId = 0  # type: int
        self.offset = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        address = Address()
        address.Init(buf, pos)
        return cls.InitFromObj(address)

    @classmethod
    def InitFromObj(cls, address):
        x = AddressT()
        x._UnPack(address)
        return x

    # AddressT
    def _UnPack(self, address):
        if address is None:
            return
        self.spaceId = address.SpaceId()
        self.offset = address.Offset()

    # AddressT
    def Pack(self, builder):
        return CreateAddress(builder, self.spaceId, self.offset)
