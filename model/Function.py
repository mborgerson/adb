# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Function(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Function()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFunction(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Function
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Function
    def Id(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Function
    def IdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Function
    def IdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Function
    def IdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Function
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from Address import Address
            obj = Address()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Function
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Function
    def Prototype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Function
    def CallingConvention(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def FunctionStart(builder): builder.StartObject(5)
def Start(builder):
    return FunctionStart(builder)
def FunctionAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return FunctionAddId(builder, id)
def FunctionStartIdVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartIdVector(builder, numElems):
    return FunctionStartIdVector(builder, numElems)
def FunctionAddAddress(builder, address): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(address), 0)
def AddAddress(builder, address):
    return FunctionAddAddress(builder, address)
def FunctionAddName(builder, name): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return FunctionAddName(builder, name)
def FunctionAddPrototype(builder, prototype): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(prototype), 0)
def AddPrototype(builder, prototype):
    return FunctionAddPrototype(builder, prototype)
def FunctionAddCallingConvention(builder, callingConvention): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(callingConvention), 0)
def AddCallingConvention(builder, callingConvention):
    return FunctionAddCallingConvention(builder, callingConvention)
def FunctionEnd(builder): return builder.EndObject()
def End(builder):
    return FunctionEnd(builder)
import Address
try:
    from typing import List, Optional
except:
    pass

class FunctionT(object):

    # FunctionT
    def __init__(self):
        self.id = None  # type: List[int]
        self.address = None  # type: Optional[Address.AddressT]
        self.name = None  # type: str
        self.prototype = None  # type: str
        self.callingConvention = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        function = Function()
        function.Init(buf, pos)
        return cls.InitFromObj(function)

    @classmethod
    def InitFromObj(cls, function):
        x = FunctionT()
        x._UnPack(function)
        return x

    # FunctionT
    def _UnPack(self, function):
        if function is None:
            return
        if not function.IdIsNone():
            if np is None:
                self.id = []
                for i in range(function.IdLength()):
                    self.id.append(function.Id(i))
            else:
                self.id = function.IdAsNumpy()
        if function.Address() is not None:
            self.address = Address.AddressT.InitFromObj(function.Address())
        self.name = function.Name()
        self.prototype = function.Prototype()
        self.callingConvention = function.CallingConvention()

    # FunctionT
    def Pack(self, builder):
        if self.id is not None:
            if np is not None and type(self.id) is np.ndarray:
                id = builder.CreateNumpyVector(self.id)
            else:
                FunctionStartIdVector(builder, len(self.id))
                for i in reversed(range(len(self.id))):
                    builder.PrependUint8(self.id[i])
                id = builder.EndVector()
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.prototype is not None:
            prototype = builder.CreateString(self.prototype)
        if self.callingConvention is not None:
            callingConvention = builder.CreateString(self.callingConvention)
        FunctionStart(builder)
        if self.id is not None:
            FunctionAddId(builder, id)
        if self.address is not None:
            address = self.address.Pack(builder)
            FunctionAddAddress(builder, address)
        if self.name is not None:
            FunctionAddName(builder, name)
        if self.prototype is not None:
            FunctionAddPrototype(builder, prototype)
        if self.callingConvention is not None:
            FunctionAddCallingConvention(builder, callingConvention)
        function = FunctionEnd(builder)
        return function
